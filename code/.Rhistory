E2 = c(7.798079,96.416016 , 6.489983,102.216797 ,
2.811371,108.105469 , -1.230374,107.578125 ,
-1.669686,100.722656 , -2.899153,96.416016 ,
0.878872,95.888672 , 2.899153,94.130859 , 5.266008,94.921875)
pol = function(dataE){
coords1 = matrix(c(dataE),
ncol = 2, byrow = TRUE)
coords1 = cbind(coords1[,2],coords1[,1])
P1 = Polygon(coords1)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
return(Ps1)
}
polE1 = pol(E1)
polE2 = pol(E2)
gab = union(polE1,polE2)
x11(width = 10,height=7)
plot(gab,axes=TRUE,xlim = c(90,150),ylim=c(-15,15))
map("world", fill=F, col="brown", bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
mar=c(0,0,0,0),resolution = 0.0000001,add = TRUE)
grid(col = "red")
box()
x <- seq(90,150,length=20)
y <- seq(-15,15,length=20)
gr <- as.matrix(expand.grid(x,y))
polygon(gab)
inside <- in.out(gab,gr)
points(gr,col=as.numeric(inside)+1)
point.in.polygon(lon1[1]-0.1,lat1[1],lon1,lat1)
sppo = SpatialPoints(data.frame(lon1,lat1))
sppo@coords = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
inside.park <- !is.na(over(sppo,gab))
sppo
sppo@coords
sppo@proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sppo
inside.park <- !is.na(over(sppo,gab))
inside.park
inside.park <- !is.na(over(sppo,gab))
inside.park
library(matlab)
library(matlab)
pos <- matrix(runif(20), 10, 2)
colnames(pos) <- c("lon", "lat")
print(pos)
new.pos <- c(0.5, 0.5) # New position
# Compute distance to points and select nearest index
jarakmin = min(abs(colSums((t(pos) - new.pos))))
# nearest.idx <- which.min(colSums((t(pos) - new.pos)) )
# nearest.idx <- which(abs(colSums((t(pos) - new.pos))) < (jarakmin+0.01))
# nearest.idx
# pos[nearest.idx, ]
cari_terdekat = function(new.pos){
nearest.idx <- which(abs(colSums((t(pos) - new.pos))) < (jarakmin+0.01))
nearest.idx
pos[nearest.idx, ]
hasil = list(nearest.idx,pos[nearest.idx, ])
return(hasil)
}
hasil=cari_terdekat(new.pos = new.pos)
if(length(hasil[[1]]) == 0){
print("kagak Ada")
}else{
print(hasil[[2]])
}
hasil[[2]]
PAT = "../dependent/"
fn = dir(PAT,pattern = "A_tabel")
data_full = list()
for(i in 1:length(fn)){
load(file = sprintf("../dependent/%s",fn[i]))
data_full[[i]] = A_tabel
}
names(data_full) = fn
x11()
par(mfrow = c(1,3))
image(data_full[[1]]$Luas_biner)
image(data_full[[2]]$Luas_biner)
toNA = data_full[[1]]$Luas_biner
data_full[[1]]$tabel == data_full[[2]]$tabel
# dim(data_full[[1]]$Luas_biner)[1]*dim(data_full[[1]]$Luas_biner)[2]
toNA[toNA == 0] = NA
ovlp = toNA %in% data_full[[2]]$Luas_biner
ovlp[ovlp == TRUE] = 1
ovlp = matrix(ovlp,dim(toNA)[1],dim(toNA)[2])
image(ovlp)
ovlp
data_full[[1]]$Luas_biner == ovlp
data_full[[2]]$Luas_biner == ovlp
bwovlp = bwlabel(ovlp)
image(lon,lat,bwovlp)
cfm = computeFeatures.moment(bwovlp)
tabel_ovlp = data.frame(lon[cfm[,1]],lat[cfm[,2]])
names(tabel_ovlp) = c("lon","lat")
points(tabel_ovlp)
points(data_full[[1]]$tabel,col="blue")
data_full[[1]]$tabel == tabel_ovlp
table(data_full[[2]]$tabel)
setwd("SatelitPusat/code/")
setwd("~/SatelitPusat/code/")
rm(list = ls())
PAT = "../dependent/"
fn = dir(PAT,pattern = "A_tabel")
data_full = list()
for(i in 1:length(fn)){
load(file = sprintf("../dependent/%s",fn[i]))
data_full[[i]] = A_tabel
}
names(data_full) = fn
x11()
par(mfrow = c(1,3))
image(data_full[[1]]$Luas_biner)
image(data_full[[2]]$Luas_biner)
toNA = data_full[[1]]$Luas_biner
data_full[[1]]$tabel == data_full[[2]]$tabel
# dim(data_full[[1]]$Luas_biner)[1]*dim(data_full[[1]]$Luas_biner)[2]
toNA[toNA == 0] = NA
ovlp = toNA %in% data_full[[2]]$Luas_biner
ovlp[ovlp == TRUE] = 1
ovlp = matrix(ovlp,dim(toNA)[1],dim(toNA)[2])
image(ovlp)
ovlp
data_full[[1]]$Luas_biner == ovlp
data_full[[2]]$Luas_biner == ovlp
bwovlp = bwlabel(ovlp)
image(lon,lat,bwovlp)
cfm = computeFeatures.moment(bwovlp)
tabel_ovlp = data.frame(lon[cfm[,1]],lat[cfm[,2]])
names(tabel_ovlp) = c("lon","lat")
points(tabel_ovlp)
points(data_full[[1]]$tabel,col="blue")
data_full[[1]]$tabel == tabel_ovlp
table(data_full[[2]]$tabel)
#!//usr/bin/Rscript
library(ncdf4)
library(maps)
library(EBImage)
library(ggmap)
library(matlab)
rm(list = ls())
#========================= OPEN DATA ===========================
setwd("~/SatelitPusat/code/")
PAT <-  "../data/recent"
dir(PAT)
REC <- Sys.time()
f <- dir(PAT)
f <- f[length(f)]
nc <- nc_open(sprintf("%s/%s",PAT,f))
CTT <- ncvar_get(nc,"CO")
dim(CTT)
lon <- ncvar_get(nc,"longitude")
lat <- ncvar_get(nc,"latitude")
ix = which(lon >= 90 & lon <= 150)
iy = which(lat >= -15 & lat <= 15)
lon = lon[ix]
lat = lat[iy]
CTT=CTT[ix,iy]
#======================== CHECK IMAGE ==========================
# x11(height = 6,width = 7)
# wrn = colorRampPalette(c("darkblue","white","grey"))
# image(lon,lat,CTT,col=wrn(100), font.lab=2,font.axis=2)
#
# map("world", fill=F, col="black", lwd=1, bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
#     mar=c(0,0,0,0),resolution = 0.0000001,add=T)
# grid()
# image(lon,lat,var)
#========================= CHECK AREA ==========================
TBB = CTT
TBB[TBB >= 220]=0    # == Selimut ==
dis = lat[length(lat)] - lat[1]
degree = dis/length(lat)
const = 111.699
km2 = 10000
jumlah_grid = as.integer(km2/(degree*const))
Area <- bwlabel(TBB)
A=Area
A[A == 0] = NA
Atable <- table(A)
AreaThreshold = jumlah_grid # jumlah grid
Adelete <- which(Atable < AreaThreshold) #delete those
simpan_luas <- which(Atable >= AreaThreshold) #delete those
for (i in Adelete){
# print(paste(i,' of ', length(iecc),sep=''))
TBB[A == i ]<- NA
A[A == i ] <- NA
}
min(TBB[!is.na(TBB)])
TBB[TBB == 0 ]=NA
TBB[is.na(TBB) ] = 299
xy = meshgrid(1:length(lat),1:length(lon))
# x11()
# image(TBB)
# image(CTT)
dd = list()
cx = c()
cy = c()
for(i in 1:length(simpan_luas)){
dd[[i]] = TBB
dd[[i]][A != simpan_luas[i] ] = 300
if(min(dd[[i]]) < 217 ){
cy[i] =  xy$x[dd[[i]] == min(dd[[i]])]
cx[i] = xy$y[dd[[i]] == min(dd[[i]])]
}
}
# image(dd[[i]])
cx = lon[cx]
cy = lat[cy]
# ================ CARI KOORDINAT CORE ====================
png(filename = sprintf("../hasil/TBB_monitor/%s.png",substr(f,1,30)),height = 700,width = 1200)
wrn = colorRampPalette(c("darkred","white","grey"))
image(lon,lat,CTT,col=wrn(70), font.lab=2,font.axis=2)
map("world", fill=F, col="black", lwd=1, bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
mar=c(0,0,0,0),resolution = 0.0000001,add=T)
points(cx,cy,pch=4, cex = 1)
grid()
box()
dev.off()
# ================ CARI NAMA LOKASI -- ONLINE ====================
coords <- data.frame(cx,cy)
cx = cx[!is.na(cx)]
cy = cy[!is.na(cy)]
names(coords) <- c("lon","lat")
nama_lokasi = c()
for(i in 1:length(cx)){
nama_lokasi[i] = revgeocode(c(cx[i],cy[i]))
}
nama_lokasi = unlist(nama_lokasi)
library(raster)
TBB[TBB >= 280] = NA
dr = raster(apply(TBB,c(1),rev))
crs(dr) <- sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
extent(dr) <- c(xmin = lon[1],xmax= lon[length(lon)],ymin = lat[1],ymax = lat[length(lat)])
# plot(dr,col=wrn(70))
# map("world", fill=F, col="black", lwd=1, bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
#     mar=c(0,0,0,0),resolution = 0.0000001,add=T)
computeFeatures.shape(TBB)
# =============== LEAFLET ================
library(leaflet)
library(raster)
cx = round(cx,digits = 4)
cy = round(cy,digits = 4)
pal <- colorNumeric(c( "darkred","red","darkblue", "NA"), values(dr),
na.color = "transparent")
lef = leaflet() %>% addTiles() %>%
addRasterImage(dr, colors = pal, opacity = 0.7) %>%
addLegend(pal = pal, values = values(dr),
title = "Cloud Top Temp (K)") %>%
addMarkers( lng=cx, lat=cy, popup=sprintf("Monitoring Kluster Awan Konvektif;
pusat lokasi lon,lat : (%s,%s) %s",cx,cy,nama_lokasi))
library(htmlwidgets)
saveWidget(lef, '../html_leaf/let.html', selfcontained = F)
computeFeatures.shape(TBB)
gt = TBB
gt[is.na(gt)] = 0
ss = bwlabel(gt)
w=table(ss)
ac = computeFeatures.shape(ss)
xyc = computeFeatures.moment(ss)
cl = colorRampPalette(c("black","blue","red","yellow"))
titik_cluster= data.frame(lon[xyc[,1]],lat[xyc[,2]])
names(titik_cluster) = c("lon","lat")
# ================ PLOT LEAFLET PUSAT KLUSTER ====================
center_lokasi = c()
for(i in 1:length(titik_cluster$lon)){
center_lokasi[i] = revgeocode(c(titik_cluster$lon[i],titik_cluster$lat[i]))
}
center_lokasi = unlist(center_lokasi)
pal <- colorNumeric(c( "darkred","red","darkblue", "NA"), values(dr),
na.color = "transparent")
clok = leaflet() %>% addTiles() %>%
addRasterImage(dr, colors = pal, opacity = 0.7) %>%
addLegend(pal = pal, values = values(dr),
title = "Cloud Top Temp (K)") %>%
addMarkers( lng=titik_cluster$lon, lat=titik_cluster$lat, popup=sprintf("Monitoring Kluster Awan Konvektif;
pusat lokasi lon,lat : (%s,%s) %s",cx,cy,center_lokasi))
saveWidget(clok,'../html_leaf/clok.html', selfcontained = F)
# save( file = "../dependent/cls.rda",dd)
# save( file = "../dependent/cls.rda",A)
tabel = w
A[is.na(A)] = 0
image(A)
# A[A ==0] =NA
B = A
B[B != 0] = 1
A_tabel = list(A,B,tabel,titik_cluster)
names(A_tabel) = c("LuasanMatrix","Luas_biner","tabel","titik_cluster")
nf = substr(f,19,30)
save( file = sprintf("../dependent/A_tabel%s.rda",nf),A_tabel)
nowcaster
#!//usr/bin/Rscript
library(ncdf4)
library(maps)
library(EBImage)
library(ggmap)
library(matlab)
library(leaflet)
library(raster)
library(htmlwidgets)
rm(list = ls())
setwd("~/SatelitPusat/code/")
PAT <-  "../data/recent"
dir(PAT)
REC <- Sys.time()
f <- dir(PAT)
f <- f[length(f)]
nowcaster<- function(f){
#========================= OPEN DATA ===========================
nc <- nc_open(sprintf("%s/%s",PAT,f))
CTT <- ncvar_get(nc,"CO")
dim(CTT)
lon <- ncvar_get(nc,"longitude")
lat <- ncvar_get(nc,"latitude")
ix = which(lon >= 90 & lon <= 150)
iy = which(lat >= -15 & lat <= 15)
lon = lon[ix]
lat = lat[iy]
CTT=CTT[ix,iy]
#======================== CHECK IMAGE ==========================
# x11(height = 6,width = 7)
# wrn = colorRampPalette(c("darkblue","white","grey"))
# image(lon,lat,CTT,col=wrn(100), font.lab=2,font.axis=2)
#
# map("world", fill=F, col="black", lwd=1, bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
#     mar=c(0,0,0,0),resolution = 0.0000001,add=T)
# grid()
# image(lon,lat,var)
#========================= CHECK AREA ==========================
TBB = CTT
TBB[TBB >= 220]=0    # == Selimut ==
dis = lat[length(lat)] - lat[1]
degree = dis/length(lat)
const = 111.699
km2 = 10000
jumlah_grid = as.integer(km2/(degree*const))
Area <- bwlabel(TBB)
A=Area
A[A == 0] = NA
Atable <- table(A)
AreaThreshold = jumlah_grid # jumlah grid
Adelete <- which(Atable < AreaThreshold) #delete those
simpan_luas <- which(Atable >= AreaThreshold) #delete those
for (i in Adelete){
TBB[A == i ]<- NA
A[A == i ] <- NA
}
min(TBB[!is.na(TBB)])
TBB[TBB == 0 ]=NA
TBB[is.na(TBB) ] = 299
xy = meshgrid(1:length(lat),1:length(lon))
dd = list()
cx = c()
cy = c()
for(i in 1:length(simpan_luas)){
dd[[i]] = TBB
dd[[i]][A != simpan_luas[i] ] = 300
if(min(dd[[i]]) < 217 ){
cy[i] =  xy$x[dd[[i]] == min(dd[[i]])]
cx[i] = xy$y[dd[[i]] == min(dd[[i]])]
}
}
cx = lon[cx]
cy = lat[cy]
# ================ CARI KOORDINAT CORE ====================
png(filename = sprintf("../hasil/TBB_monitor/%s.png",substr(f,1,30)),height = 700,width = 1200)
wrn = colorRampPalette(c("darkred","white","grey"))
image(lon,lat,CTT,col=wrn(70), font.lab=2,font.axis=2)
map("world", fill=F, col="black", lwd=1, bg=NULL, xlim=c(90,150), ylim=c(-15, 15),
mar=c(0,0,0,0),resolution = 0.0000001,add=T)
points(cx,cy,pch=4, cex = 1)
grid()
box()
dev.off()
# ================ CARI NAMA LOKASI -- ONLINE ====================
coords <- data.frame(cx,cy)
cx = cx[!is.na(cx)]
cy = cy[!is.na(cy)]
names(coords) <- c("lon","lat")
nama_lokasi = c()
for(i in 1:length(cx)){
nama_lokasi[i] = revgeocode(c(cx[i],cy[i]))
}
nama_lokasi = unlist(nama_lokasi)
library(raster)
TBB[TBB >= 280] = NA
dr = raster(apply(TBB,c(1),rev))
crs(dr) <- sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
extent(dr) <- c(xmin = lon[1],xmax= lon[length(lon)],ymin = lat[1],ymax = lat[length(lat)])
# =============== LEAFLET ================
cx = round(cx,digits = 4)
cy = round(cy,digits = 4)
pal <- colorNumeric(c( "darkred","red","darkblue", "NA"), values(dr),
na.color = "transparent")
lef = leaflet() %>% addTiles() %>%
addRasterImage(dr, colors = pal, opacity = 0.7) %>%
addLegend(pal = pal, values = values(dr),
title = "Cloud Top Temp (K)") %>%
addMarkers( lng=cx, lat=cy, popup=sprintf("Monitoring Kluster Awan Konvektif;
pusat lokasi lon,lat : (%s,%s) %s",cx,cy,nama_lokasi))
saveWidget(lef, '../html_leaf/let.html', selfcontained = F)
computeFeatures.shape(TBB)
gt = TBB
gt[is.na(gt)] = 0
ss = bwlabel(gt)
w=table(ss)
ac = computeFeatures.shape(ss)
xyc = computeFeatures.moment(ss)
cl = colorRampPalette(c("black","blue","red","yellow"))
titik_cluster= data.frame(lon[xyc[,1]],lat[xyc[,2]])
names(titik_cluster) = c("lon","lat")
# ================ PLOT LEAFLET PUSAT KLUSTER ====================
center_lokasi = c()
for(i in 1:length(titik_cluster$lon)){
center_lokasi[i] = revgeocode(c(titik_cluster$lon[i],titik_cluster$lat[i]))
}
center_lokasi = unlist(center_lokasi)
pal <- colorNumeric(c( "darkred","red","darkblue", "NA"), values(dr),
na.color = "transparent")
clok = leaflet() %>% addTiles() %>%
addRasterImage(dr, colors = pal, opacity = 0.7) %>%
addLegend(pal = pal, values = values(dr),
title = "Cloud Top Temp (K)") %>%
addMarkers( lng=titik_cluster$lon, lat=titik_cluster$lat, popup=sprintf("Monitoring Kluster Awan Konvektif;
pusat lokasi lon,lat : (%s,%s) %s",cx,cy,center_lokasi))
saveWidget(clok,'../html_leaf/clok.html', selfcontained = F)
tabel = w
A[is.na(A)] = 0
image(A)
# A[A ==0] =NA
B = A
B[B != 0] = 1
A_tabel = list(A,B,tabel,titik_cluster)
names(A_tabel) = c("LuasanMatrix","Luas_biner","tabel","titik_cluster")
nf = substr(f,19,30)
save( file = sprintf("../dependent/A_tabel%s.rda",nf),A_tabel)
}
nowcaster(f=f)
setwd("~/SatelitPusat/code/")
rm(list = ls())
PAT = "../dependent/"
fn = dir(PAT,pattern = "A_tabel")
fn
data_full = list()
for(i in 1:length(fn)){
load(file = sprintf("../dependent/%s",fn[i]))
data_full[[i]] = A_tabel
}
names(data_full) = fn
x11()
par(mfrow = c(1,3))
image(data_full[[1]]$Luas_biner)
image(data_full[[2]]$Luas_biner)
data_full
toNA = data_full[[1]]$Luas_biner
data_full[[1]]$tabel == data_full[[2]]$tabel
toNA
toNA[toNA == 0] = NA
toNA
ovlp = toNA %in% data_full[[2]]$Luas_biner
ovlp
ovlp[ovlp == TRUE] = 1
ovlp = matrix(ovlp,dim(toNA)[1],dim(toNA)[2])
bwovlp = bwlabel(ovlp)
library(EBImage)
bwovlp = bwlabel(ovlp)
bwovlp
image(lon,lat,bwovlp)
dim(bwovlp)
lon = seq(90,150,length=dim(bwovlp)[1])
lon
lat = seq(-15,15,length=dim(bwovlp)[2])
lat
image(lon,lat,bwovlp)
fn
for(i in 1:length(fn)){
load(file = sprintf("../dependent/%s",fn[i]))
data_full[[i]] = A_tabel
}
data_full
image(data_full[[1]]$Luas_biner)
image(data_full[[2]]$Luas_biner)
toNA = data_full[[1]]$Luas_biner
toNA
image(toNA)
toNA[toNA == 0] = NA
toNA
ovlp = toNA %in% data_full[[2]]$Luas_biner
ovlp
ovlp[ovlp == TRUE] = 1
ovlp
ovlp = matrix(ovlp,dim(toNA)[1],dim(toNA)[2])
ovlp
lon = seq(90,150,length=dim(bwovlp)[1])
lat = seq(-15,15,length=dim(bwovlp)[2])
bwovlp = bwlabel(ovlp)
image(lon,lat,bwovlp)
cfm = computeFeatures.moment(bwovlp)
cfm
tabel_ovlp = data.frame(lon[cfm[,1]],lat[cfm[,2]])
tabel_ovlp
tabel_ovlp = data.frame(lon[cfm[,1]],lat[cfm[,2]])
tabel_ovlp
names(tabel_ovlp) = c("lon","lat")
tabel_ovlp
points(tabel_ovlp)
image(lon,lat,bwovlp)
cfm = computeFeatures.moment(bwovlp)
tabel_ovlp = data.frame(lon[cfm[,1]],lat[cfm[,2]])
names(tabel_ovlp) = c("lon","lat")
points(tabel_ovlp)
points(data_full[[1]]$tabel,col="blue",pch = 3)
table(data_full[[2]]$tabel)
bwovlp
image(lon,lat,bwovlp)
